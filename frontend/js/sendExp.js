function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ –µ–≥–æ ID
async function getExpressionByGet(id) {
    let result;
    await fetch(`${ServerAddress}/api/v1/expressions/${id}`)
        .then(response => response.json())
        .then(data => {
            result = data.expression
        })
        .catch(error => alert('Error: ' + error));
    return result
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
async function sendExpression() {
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ input
    const expression = document.getElementById("exp-data").value;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    let reqData = {expression: expression};
    let response = await fetch(
        `${ServerAddress}/api/v1/calculate`,
        {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(reqData)
        });
    let data = await response.json();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (!data.hasOwnProperty('id')) {
        alert("–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏: " + data.error);
        return;
    }

    // –û—á–∏—â–∞–µ–º input
    document.getElementById('exp-data').value = '';

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–∞–±–ª–∏—Ü—É
    await addTask(data.id, "pending", null, expression);

    // –°–ª–µ–¥–∏–º –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–¥–∞—á–∏ üëÄ
    await followExp(data.id, expression)
}
